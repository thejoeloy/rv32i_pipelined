$date
   Thu Feb  1 12:42:47 2024
$end
$version
  2023.1
$end
$timescale
  1ps
$end
$scope module riscv_cpu_tb $end
$var reg 1 ! clk $end
$var reg 1 " r $end
$var reg 32 # i_mem_addr [31:0] $end
$var reg 32 $ i_mem_data [31:0] $end
$var reg 1 % i_mem_write $end
$scope module dut $end
$var wire 1 & clk $end
$var wire 1 ' r $end
$var wire 8 ( result [7:0] $end
$var reg 32 ) PC [31:0] $end
$var wire 32 * instr [31:0] $end
$var wire 2 + pc_src [1:0] $end
$var wire 1 , if_flush $end
$var wire 1 - stall $end
$var wire 1 . branch $end
$var wire 32 / read_data1 [31:0] $end
$var wire 32 0 read_data2 [31:0] $end
$var wire 32 1 read_data1_signed [31:0] $end
$var wire 32 2 read_data2_signed [31:0] $end
$var wire 32 3 imm_sext [31:0] $end
$var wire 32 4 IFID_instr_o [31:0] $end
$var wire 32 5 IFID_pc_o [31:0] $end
$var wire 1 6 mem_read $end
$var wire 1 7 mem_2_reg $end
$var wire 1 8 mem_write $end
$var wire 1 9 alu_src $end
$var wire 1 : reg_write $end
$var wire 1 ; IDEX_mem_read_o $end
$var wire 5 < IDEX_rd_o [4:0] $end
$var wire 5 = IDEX_rs1_o [4:0] $end
$var wire 5 > IDEX_rs2_o [4:0] $end
$var wire 32 ? write_data [31:0] $end
$var wire 5 @ MEMWB_rd_o [4:0] $end
$var wire 1 A MEMWB_reg_write_o $end
$var wire 32 B IDEX_imm_sext_o [31:0] $end
$var wire 32 C IDEX_read_data1_o [31:0] $end
$var wire 32 D IDEX_read_data2_o [31:0] $end
$var wire 32 E IDEX_read_data1_i [31:0] $end
$var wire 32 F IDEX_read_data2_i [31:0] $end
$var wire 1 G IDEX_reg_write_o $end
$var wire 1 H IDEX_mem_2_reg_o $end
$var wire 1 I IDEX_mem_write_o $end
$var wire 1 J IDEX_alu_src_o $end
$var wire 7 K IDEX_op_code_o [6:0] $end
$var wire 10 L IDEX_func_code_o [9:0] $end
$var wire 1 M EXMEM_reg_write_o $end
$var wire 1 N EXMEM_mem_2_reg_o $end
$var wire 5 O EXMEM_rd_o [4:0] $end
$var wire 2 P forwardA [1:0] $end
$var wire 2 Q forwardB [1:0] $end
$var wire 32 R alu_in1 [31:0] $end
$var wire 32 S alu_in2 [31:0] $end
$var wire 32 T alu_in2_partial [31:0] $end
$var wire 32 U alu_result [31:0] $end
$var wire 32 V EXMEM_alu_result_o [31:0] $end
$var wire 1 W EXMEM_mem_read_o $end
$var wire 1 X EXMEM_mem_write_o $end
$var wire 32 Y EXMEM_alu_in2_o [31:0] $end
$var wire 32 Z read_data [31:0] $end
$var wire 1 [ MEMWB_mem_2_reg_o $end
$var wire 32 \ MEMWB_alu_result_o [31:0] $end
$scope module im1 $end
$var wire 1 ' r $end
$var wire 10 ] read_addr [9:0] $end
$var reg 32 ^ instr [31:0] $end
$var integer 32 _ i [31:0] $end
$upscope $end
$scope module p1 $end
$var wire 1 & clk $end
$var wire 1 ' r $end
$var wire 1 - stall $end
$var wire 1 , if_flush $end
$var wire 32 * IFID_instr_i [31:0] $end
$var wire 32 ` IFID_pc_i [31:0] $end
$var reg 32 a IFID_instr_o [31:0] $end
$var reg 32 b IFID_pc_o [31:0] $end
$upscope $end
$scope module cu1 $end
$var wire 1 ' r $end
$var wire 7 c instr [6:0] $end
$var wire 1 - stall $end
$var wire 1 6 mem_read $end
$var wire 1 7 mem_2_reg $end
$var wire 1 8 mem_write $end
$var wire 1 9 alu_src $end
$var wire 1 : reg_write $end
$var wire 1 . branch $end
$upscope $end
$scope module hu1 $end
$var wire 1 ' r $end
$var wire 1 ; IDEX_mem_read $end
$var wire 5 < IDEX_rd [4:0] $end
$var wire 5 d IFID_rs1 [19:15] $end
$var wire 5 e IFID_rs2 [24:20] $end
$var reg 1 f stall $end
$upscope $end
$scope module ig1 $end
$var wire 1 ' r $end
$var wire 32 4 instruction [31:0] $end
$var reg 32 g imm_sext [31:0] $end
$upscope $end
$scope module rf1 $end
$var wire 1 & clk $end
$var wire 1 ' r $end
$var wire 5 d rs1 [19:15] $end
$var wire 5 e rs2 [24:20] $end
$var wire 5 @ write_addr [4:0] $end
$var wire 1 A write_enable $end
$var wire 32 ? write_data [31:0] $end
$var reg 32 h read_data1 [31:0] $end
$var reg 32 i read_data2 [31:0] $end
$var integer 32 j i [31:0] $end
$upscope $end
$scope module p2 $end
$var wire 1 & clk $end
$var wire 1 ' r $end
$var wire 5 d IDEX_rs1_i [19:15] $end
$var wire 5 e IDEX_rs2_i [24:20] $end
$var wire 5 k IDEX_rd_i [11:7] $end
$var wire 32 3 IDEX_imm_sext_i [31:0] $end
$var wire 32 E IDEX_read_data1_i [31:0] $end
$var wire 32 F IDEX_read_data2_i [31:0] $end
$var wire 1 : IDEX_reg_write_i $end
$var wire 1 7 IDEX_mem_2_reg_i $end
$var wire 1 6 IDEX_mem_read_i $end
$var wire 1 8 IDEX_mem_write_i $end
$var wire 1 9 IDEX_alu_src_i $end
$var wire 7 c IDEX_op_code_i [6:0] $end
$var wire 10 l IDEX_func_code_i [9:0] $end
$var reg 5 m IDEX_rs1_o [4:0] $end
$var reg 5 n IDEX_rs2_o [4:0] $end
$var reg 5 o IDEX_rd_o [4:0] $end
$var reg 32 p IDEX_imm_sext_o [31:0] $end
$var reg 32 q IDEX_read_data1_o [31:0] $end
$var reg 32 r IDEX_read_data2_o [31:0] $end
$var reg 1 s IDEX_reg_write_o $end
$var reg 1 t IDEX_mem_2_reg_o $end
$var reg 1 u IDEX_mem_read_o $end
$var reg 1 v IDEX_mem_write_o $end
$var reg 1 w IDEX_alu_src_o $end
$var reg 7 x IDEX_op_code_o [6:0] $end
$var reg 10 y IDEX_func_code_o [9:0] $end
$upscope $end
$scope module f1 $end
$var wire 1 ' r $end
$var wire 1 M EXMEM_reg_write $end
$var wire 1 A MEMWB_reg_write $end
$var wire 5 = IDEX_rs1 [4:0] $end
$var wire 5 > IDEX_rs2 [4:0] $end
$var wire 5 O EXMEM_rd [4:0] $end
$var wire 5 @ MEMWB_rd [4:0] $end
$var reg 2 z forwardA [1:0] $end
$var reg 2 { forwardB [1:0] $end
$upscope $end
$scope module alu1 $end
$var wire 1 ' r $end
$var wire 7 K op_code [6:0] $end
$var wire 10 L func_code [9:0] $end
$var wire 32 R alu_in1 [31:0] $end
$var wire 32 S alu_in2 [31:0] $end
$var reg 32 | alu_result [31:0] $end
$var wire 32 } alu_in1_signed [31:0] $end
$var wire 32 ~ alu_in2_signed [31:0] $end
$upscope $end
$scope module p3 $end
$var wire 1 & clk $end
$var wire 1 ' r $end
$var wire 32 U EXMEM_alu_result_i [31:0] $end
$var wire 32 T EXMEM_alu_in2_i [31:0] $end
$var wire 5 < EXMEM_rd_i [4:0] $end
$var wire 1 G EXMEM_reg_write_i $end
$var wire 1 H EXMEM_mem_2_reg_i $end
$var wire 1 ; EXMEM_mem_read_i $end
$var wire 1 I EXMEM_mem_write_i $end
$var reg 32 !! EXMEM_alu_result_o [31:0] $end
$var reg 32 "! EXMEM_alu_in2_o [31:0] $end
$var reg 5 #! EXMEM_rd_o [4:0] $end
$var reg 1 $! EXMEM_reg_write_o $end
$var reg 1 %! EXMEM_mem_2_reg_o $end
$var reg 1 &! EXMEM_mem_read_o $end
$var reg 1 '! EXMEM_mem_write_o $end
$upscope $end
$scope module dm1 $end
$var wire 1 & clk $end
$var wire 1 ' r $end
$var wire 10 (! address [9:0] $end
$var wire 1 X write_en $end
$var wire 1 W read_en $end
$var wire 32 Y write_data [31:0] $end
$var reg 32 )! read_data [31:0] $end
$var integer 32 *! i [31:0] $end
$upscope $end
$scope module p4 $end
$var wire 1 & clk $end
$var wire 1 ' r $end
$var wire 1 M MEMWB_reg_write_i $end
$var wire 1 N MEMWB_mem_2_reg_i $end
$var wire 5 O MEMWB_rd_i [4:0] $end
$var wire 32 V MEMWB_alu_result_i [31:0] $end
$var reg 1 +! MEMWB_reg_write_o $end
$var reg 1 ,! MEMWB_mem_2_reg_o $end
$var reg 5 -! MEMWB_rd_o [4:0] $end
$var reg 32 .! MEMWB_alu_result_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
bx !!
1"
bx "!
b0 #
bx #!
b0 $
x$!
0%
x%!
0&
x&!
1'
x'!
b0 (
bx (!
bx )
bx )!
b0 *
b1111111111 *!
bx +
x+!
x,
x,!
0-
bx -!
0.
bx .!
bx /
bx 0
bx 1
bx 2
b0 3
bx 4
bx 5
06
07
08
09
0:
x;
bx <
bx =
bx >
bx ?
bx @
xA
bx B
bx C
bx D
bx E
bx F
xG
xH
xI
xJ
bx K
bx L
xM
xN
bx O
b0 P
b0 Q
bx R
bx S
bx T
b0 U
bx V
xW
xX
bx Y
bx Z
x[
bx \
bx ]
b0 ^
b10000000000000000 _
bx `
bx a
bx b
bx c
bx d
bx e
0f
b0 g
bx h
bx i
b100000 j
bx k
bx l
bx m
bx n
bx o
bx p
bx q
bx r
xs
xt
xu
xv
xw
bx x
bx y
b0 z
b0 {
b0 |
bx }
bx ~
$end
#5000
1!
b0 !!
b0 "!
b0 #!
0$!
0%!
1&
0&!
0'!
b0 (!
b0 )
b0 )!
b0 +
0+!
0,
0,!
b0 -!
b0 .!
b0 4
b0 5
0;
b0 <
b0 =
b0 >
b0 ?
b0 @
0A
b0 B
b0 C
b0 D
0G
0H
0I
0J
b0 K
b0 L
0M
0N
b0 O
b0 R
b0 S
b0 T
b0 V
0W
0X
b0 Y
b0 Z
0[
b0 \
b0 ]
b0 `
b0 a
b0 b
b0 c
b0 d
b0 e
b0 k
b0 l
b0 m
b0 n
b0 o
b0 p
b0 q
b0 r
0s
0t
0u
0v
0w
b0 x
b0 y
b0 }
b0 ~
#10000
0!
0"
0&
0'
b1000001000000110110011 *
b0 /
b0 0
b0 1
b0 2
b0 E
b0 F
b1000001000000110110011 ^
b0 h
b0 i
#15000
1!
1&
b1 )
b1000000000100010000001000110011 *
b1000001000000110110011 4
1:
b1 ]
b1000000000100010000001000110011 ^
b1 `
b1000001000000110110011 a
b110011 c
b1 d
b10 e
b11 k
#20000
0!
0&
b1 /
b101 0
b1 1
b101 2
b1 E
b101 F
b1 h
b101 i
#25000
1!
1&
b110 (
b10 )
b1000001111001010110011 *
b1000000000100010000001000110011 4
b1 5
b11 <
b1 =
b10 >
b1 C
b101 D
1G
b110011 K
b1 R
b101 S
b101 T
b110 U
b10 ]
b1000001111001010110011 ^
b10 `
b1000000000100010000001000110011 a
b1 b
b110011 c
b10 d
b1 e
b100 k
b100000 l
b1 m
b10 n
b11 o
b1 q
b101 r
1s
b110011 x
b110 |
b1 }
b101 ~
#30000
0!
0&
b101 /
b1 0
b101 1
b1 2
b101 E
b1 F
b101 h
b1 i
#35000
1!
b110 !!
b101 "!
b11 #!
1$!
1&
b100 (
b110 (!
b11 )
b1000100110001100110011 *
b1000001111001010110011 4
b10 5
b100 <
b10 =
b1 >
b101 C
b1 D
b100000 L
1M
b11 O
b101 R
b1 S
b1 T
b100 U
b110 V
b101 Y
b11 ]
b1000100110001100110011 ^
b11 `
b1000001111001010110011 a
b10 b
b110011 c
b1 d
b10 e
b101 k
b1110000000 l
b10 m
b1 n
b100 o
b101 q
b1 r
b100000 y
b100 |
b101 }
b1 ~
#40000
0!
0&
b1 /
b101 0
b1 1
b101 2
b1 E
b101 F
b1 h
b101 i
#45000
1!
b100 !!
b1 "!
b100 #!
1&
b1 (
b100 (!
b100 )
b10000000010001110000011 *
1+!
b11 -!
b110 .!
b1000100110001100110011 4
b11 5
b101 <
b1 =
b10 >
b110 ?
b11 @
1A
b1 C
b101 D
b1110000000 L
b100 O
b1 R
b101 S
b101 T
b1 U
b100 V
b1 Y
b110 \
b100 ]
b10000000010001110000011 ^
b100 `
b1000100110001100110011 a
b11 b
b110011 c
b100 d
b10 e
b110 k
b1100000000 l
b1 m
b10 n
b101 o
b1 q
b101 r
b1110000000 y
b1 |
b1 }
b101 ~
#50000
0!
0&
b0 /
b0 1
b0 E
b0 h
#55000
1!
b1 !!
b101 "!
b101 #!
1&
b101 (
b1 (!
b101 )
b11100000010000000100011 *
b100 -!
b100 .!
b100 3
b10000000010001110000011 4
b100 5
16
17
19
b110 <
b100 =
b100 ?
b100 @
b0 C
b1100000000 L
b101 O
b1 P
b100 R
b101 U
b1 V
b101 Y
b100 \
b101 ]
b11100000010000000100011 ^
b101 `
b10000000010001110000011 a
b100 b
b11 c
b0 d
b100 e
b100 g
b111 k
b100000000 l
b100 m
b110 o
b0 q
b1100000000 y
b1 z
b101 |
b100 }
#60000
0!
0&
b0 0
b0 2
b0 F
b0 i
#65000
1!
b101 !!
b110 #!
1&
b100 (
b101 (!
b110 )
b11000010000010101100011 *
1-
b101 -!
b1 .!
b0 3
b11100000010000000100011 4
b101 5
06
07
08
09
0:
1;
b111 <
b0 =
b100 >
b1 ?
b101 @
b100 B
b0 D
1H
1J
b11 K
b100000000 L
b110 O
b0 P
b0 R
b100 S
b0 T
b100 U
b101 V
b1 \
b110 ]
b11000010000010101100011 ^
b110 `
b11100000010000000100011 a
b101 b
b100011 c
b0 d
b111 e
1f
b0 g
b0 k
b0 m
b100 n
b111 o
b100 p
b0 r
1t
1u
1w
b11 x
b100000000 y
b0 z
b100 |
b0 }
b100 ~
#70000
0!
0&
#75000
1!
b100 !!
b0 "!
b111 #!
1%!
1&
1&!
b100 (
b100 (!
0-
b110 -!
b101 .!
18
19
0;
b0 <
b111 >
b101 ?
b110 @
b0 B
0G
0H
0J
b100011 K
1N
b111 O
b10 Q
b100 S
b100 T
b100 U
b100 V
1W
b0 Y
b101 \
0f
b111 n
b0 o
b0 p
0s
0t
0u
0w
b100011 x
b10 {
b100 |
b100 ~
#80000
0!
0&
#85000
1!
b100 "!
b0 #!
0$!
0%!
1&
0&!
b0 (
b111 )
b1000100 )!
b0 *
b1 +
1,
1,!
b111 -!
1.
b100 .!
b1010 3
b11000010000010101100011 4
b110 5
08
09
b1000100 ?
b111 @
1I
1J
0M
0N
b0 O
b1 Q
b0 S
b1000100 T
b0 U
0W
b100 Y
b1000100 Z
1[
b100 \
b111 ]
b0 ^
b111 `
b11000010000010101100011 a
b110 b
b1100011 c
b10 d
b110 e
b1010 g
b1010 k
b0 l
1v
1w
b1 {
b0 |
b0 ~
#90000
0!
0&
b101 /
b101 0
b101 1
b101 2
b101 E
b101 F
b101 h
b101 i
#95000
1!
b0 !!
b1000100 "!
1&
1'!
b0 (!
b10000 )
b0 )!
b1100001001010000110011 *
b0 +
0+!
0,
0,!
b0 -!
0.
b0 3
b0 4
b1010 <
b10 =
b110 >
b100 ?
b0 @
0A
b1010 B
b101 C
b101 D
0I
0J
b1100011 K
b0 L
b0 Q
b101 R
b101 S
b101 T
b0 V
1X
b1000100 Y
b0 Z
0[
b10000 ]
b1100001001010000110011 ^
b10000 `
b0 a
b0 c
b0 d
b0 e
b0 g
b0 k
b10 m
b110 n
b1010 o
b1010 p
b101 q
b101 r
0v
0w
b1100011 x
b0 y
b0 {
b101 }
b101 ~
#100000
0!
0&
b0 /
b0 0
b0 1
b0 2
b0 E
b0 F
b0 h
b0 i
#105000
1!
b101 "!
b1010 #!
1&
0'!
b10001 )
b1100001010010010110011 *
b0 .!
b1100001001010000110011 4
b10000 5
1:
b0 <
b0 =
b0 >
b0 ?
b0 B
b0 C
b0 D
b0 K
b1010 O
b0 R
b0 S
b0 T
0X
b101 Y
b0 \
b10001 ]
b1100001010010010110011 ^
b10001 `
b1100001001010000110011 a
b10000 b
b110011 c
b1 d
b11 e
b1000 k
b10000000 l
b0 m
b0 n
b0 o
b0 p
b0 q
b0 r
b0 x
b0 }
b0 ~
#110000
0!
0&
b1 /
b110 0
b1 1
b110 2
b1 E
b110 F
b1 h
b110 i
#115000
1!
b0 "!
b0 #!
1&
b1000000 (
b10010 )
b1100001100010100110011 *
b1010 -!
b1100001010010010110011 4
b10001 5
b1000 <
b1 =
b11 >
b1010 @
b1 C
b110 D
1G
b110011 K
b10000000 L
b0 O
b1 R
b110 S
b110 T
b1000000 U
b0 Y
b10010 ]
b1100001100010100110011 ^
b10010 `
b1100001010010010110011 a
b10001 b
b110011 c
b1 d
b11 e
b1001 k
b100000000 l
b1 m
b11 n
b1000 o
b1 q
b110 r
1s
b110011 x
b10000000 y
b1000000 |
b1 }
b110 ~
#120000
0!
0&
#125000
1!
b1000000 !!
b110 "!
b1000 #!
1$!
1&
b1 (
b1000000 (!
b10011 )
b100011101010110110011 *
b0 -!
b1100001100010100110011 4
b10010 5
b1001 <
b0 @
b100000000 L
1M
b1000 O
b1 U
b1000000 V
b110 Y
b10011 ]
b100011101010110110011 ^
b10011 `
b1100001100010100110011 a
b10010 b
b110011 c
b1 d
b11 e
b1010 k
b1000000000 l
b1001 o
b100000000 y
b1 |
#130000
0!
0&
#135000
1!
b1 !!
b1001 #!
1&
b111 (
b1 (!
b10100 )
b1000000000100011101011000110011 *
1+!
b1000 -!
b1000000 .!
b100011101010110110011 4
b10011 5
b1010 <
b1000000 ?
b1000 @
1A
b1000000000 L
b1001 O
b111 U
b1 V
b1000000 \
b10100 ]
b1000000000100011101011000110011 ^
b10100 `
b100011101010110110011 a
b10011 b
b110011 c
b11 d
b1 e
b1011 k
b1010000000 l
b1010 o
b1000000000 y
b111 |
#140000
0!
0&
b110 /
b1 0
b110 1
b1 2
b110 E
b1 F
b110 h
b1 i
#145000
1!
b111 !!
b1010 #!
1&
b11 (
b111 (!
b10101 )
b10101100000011010010011 *
b1001 -!
b1 .!
b1000000000100011101011000110011 4
b10100 5
b1011 <
b11 =
b1 >
b1 ?
b1001 @
b110 C
b1 D
b1010000000 L
b1010 O
b110 R
b1 S
b1 T
b11 U
b111 V
b1 \
b10101 ]
b10101100000011010010011 ^
b10101 `
b1000000000100011101011000110011 a
b10100 b
b110011 c
b11 d
b1 e
b1100 k
b1010100000 l
b11 m
b1 n
b1011 o
b110 q
b1 r
b1010000000 y
b11 |
b110 }
b1 ~
#150000
0!
0&
#155000
1!
b11 !!
b1 "!
b1011 #!
1&
b11 (!
b10110 )
b101101010011100010011 *
b1010 -!
b111 .!
b101 3
b10101100000011010010011 4
b10101 5
19
b1100 <
b111 ?
b1010 @
b1010100000 L
b1011 O
b11 V
b1 Y
b111 \
b10110 ]
b101101010011100010011 ^
b10110 `
b10101100000011010010011 a
b10101 b
b10011 c
b1100 d
b101 e
b101 g
b1101 k
b0 l
b1100 o
b1010100000 y
#160000
0!
0&
b0 /
b0 1
b0 E
b0 h
#165000
1!
b1100 #!
1&
b1000 (
b10111 )
b10101101110011110010011 *
b1011 -!
b11 .!
b1 3
b101101010011100010011 4
b10110 5
b1101 <
b1100 =
b101 >
b11 ?
b1011 @
b101 B
b0 C
1J
b10011 K
b0 L
b1100 O
b10 P
b11 R
b101 S
b1000 U
b11 \
b10111 ]
b10101101110011110010011 ^
b10111 `
b101101010011100010011 a
b10110 b
b10011 c
b1101 d
b1 e
b1 g
b1110 k
b100000000 l
b1100 m
b101 n
b1101 o
b101 p
b0 q
1w
b10011 x
b0 y
b10 z
b1000 |
b11 }
b101 ~
#170000
0!
0&
#175000
1!
b1000 !!
b1101 #!
1&
b0 (
b1000 (!
b11000 )
b101111111100000010011 *
b1100 -!
b101 3
b10101101110011110010011 4
b10111 5
b1110 <
b1101 =
b1 >
b1100 @
b1 B
b100000000 L
b1101 O
b1000 R
b1 S
b0 U
b1000 V
b11000 ]
b101111111100000010011 ^
b11000 `
b10101101110011110010011 a
b10111 b
b10011 c
b1101 d
b101 e
b101 g
b1111 k
b1100000000 l
b1101 m
b1 n
b1110 o
b1 p
b100000000 y
b0 |
b1000 }
b1 ~
#180000
0!
0&
#185000
1!
b0 !!
b1110 #!
1&
b1101 (
b0 (!
b11001 )
b1000000000000100011101111 *
b1101 -!
b1000 .!
b1 3
b101111111100000010011 4
b11000 5
b1111 <
b101 >
b1000 ?
b1101 @
b101 B
b1100000000 L
b1110 O
b1 P
b1000 R
b101 S
b1101 U
b0 V
b1000 \
b11001 ]
b1000000000000100011101111 ^
b11001 `
b101111111100000010011 a
b11000 b
b10011 c
b1111 d
b1 e
b1 g
b10000 k
b1110000000 l
b101 n
b1111 o
b101 p
b1100000000 y
b1 z
b1101 |
b1000 }
b101 ~
#190000
0!
0&
#195000
1!
b1101 !!
b1111 #!
1&
b1 (
b1101 (!
b11010 )
b0 *
b1 +
1,
b1110 -!
b0 .!
b1000 3
b1000000000000100011101111 4
b11001 5
09
b10000 <
b1111 =
b1 >
b0 ?
b1110 @
b1 B
b11001 E
b100 F
b1110000000 L
b1111 O
b10 P
b1101 R
b1 S
b1 U
b1101 V
b0 \
b11010 ]
b0 ^
b11010 `
b1000000000000100011101111 a
b11001 b
b1101111 c
b0 d
b10000 e
b1000 g
b10001 k
b0 l
b1111 m
b1 n
b10000 o
b1 p
b1110000000 y
b10 z
b1 |
b1101 }
b1 ~
#200000
0!
0&
b0 0
b0 2
b0 i
#205000
1!
b1 !!
b10000 #!
1&
b11010 (
b1 (!
b100001 )
b0 +
0,
b1111 -!
b1101 .!
b0 3
b0 4
0:
b10001 <
b0 =
b10000 >
b1101 ?
b1111 @
b1000 B
b11001 C
b100 D
b0 E
b0 F
0J
b1101111 K
b0 L
b10000 O
b0 P
b10 Q
b11001 R
b1 S
b1 T
b11010 U
b1 V
b1101 \
b100001 ]
b100001 `
b0 a
b0 c
b0 d
b0 e
b0 g
b0 k
b0 m
b10000 n
b10001 o
b1000 p
b11001 q
b100 r
0w
b1101111 x
b0 y
b0 z
b10 {
b11010 |
b11001 }
b1 ~
#210000
0!
0&
#215000
1!
b11010 !!
b10001 #!
1&
b0 (
b11010 (!
b100010 )
b10000001000100101100111 *
b10000 -!
b1 .!
b100001 5
b0 <
b0 >
b1 ?
b10000 @
b0 B
b0 C
b0 D
0G
b0 K
b10001 O
b0 Q
b0 R
b0 S
b0 T
b0 U
b11010 V
b1 \
b100010 ]
b10000001000100101100111 ^
b100010 `
b100001 b
b0 n
b0 o
b0 p
b0 q
b0 r
0s
b0 x
b0 {
b0 |
b0 }
b0 ~
#220000
0!
0&
#225000
1!
b0 !!
b0 "!
b0 #!
0$!
1&
b0 (!
b100011 )
b100100110110111 *
b10 +
1,
b10001 -!
b11010 .!
b100 3
b10000001000100101100111 4
b100010 5
1:
b11010 ?
b10001 @
b100010 E
b100 F
0M
b0 O
b0 V
b0 Y
b11010 \
b100011 ]
b100100110110111 ^
b100011 `
b10000001000100101100111 a
b100010 b
b1100111 c
b1 d
b100 e
b100 g
b10010 k
#230000
0!
0&
b1 /
b100 0
b1 1
b100 2
b1 h
b100 i
